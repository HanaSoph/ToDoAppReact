{"version":3,"sources":["Header/Header.js","Task-input/Task-input.js","Tasks/Tasks.js","Completed/Completed.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","TaskInput","props","useState","taskText","setTaskText","urgent","setUrgent","type","placeholder","aria-label","aria-describedby","value","onChange","event","target","style","padding","fontSize","id","onClick","alert","addNewTaskFunc","checked","htmlFor","Tasks","text","completeTaskFunc","deleteTaskFunc","Completed","App","tasks","setTasks","useEffect","axios","get","then","response","console","log","data","newTasks","sort","a","b","sortNewToOld","catch","err","setTaskComplete","put","Date","map","task","TaskId","deleteTask","delete","filteredTasks","filter","completedTasks","slice","todoTasks","dateA","post","Description","Urgent","length","key","completed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8c6731c1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n    return (\n        <div className=\"hero-image\">\n            <div className=\"hero-text\">\n                <h1>The Big Day To Do List</h1>\n                <p> The happiest to do list of your life!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header ","import React, { useState } from \"react\";\nimport \"./Task-input.css\";\n\nfunction TaskInput(props) {\n\n    const [taskText, setTaskText] = useState(\"\");\n    const [urgent, setUrgent] = useState(false);\n\n    const handleAddTask = () => {\n        if (taskText === \"\") {\n            alert(\"Please enter a task\");\n        } else {\n        props.addNewTaskFunc(taskText, urgent)\n        setTaskText(\"\");\n        setUrgent(false);\n    }}\n\n    return (\n        <section>\n            <div className=\"row\">\n                <div className=\"col-10\">\n                    <div className=\"input-group mb-3\">\n                        <input \n                            type=\"text\" \n                            className=\"form-control\" \n                            placeholder=\"Add your task\" \n                            aria-label=\"Add Task\"\n                            aria-describedby=\"button-addon2\" \n                            value={taskText} \n                            onChange={(event) => setTaskText(event.target.value)} />\n                        <div className=\"input-group-append\">\n                            <button\n                                className=\"btn btn-outline-secondary\"\n                                type=\"button\"\n                                style={{ padding: \" 2px 10px\", fontSize: \"20px\" }}\n                                id=\"button-addon2\"\n                                onClick={handleAddTask}>+</button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 pt-2\">\n                    <input \n                    type=\"checkbox\" \n                    className=\"form-check-input\" \n                    id=\"urgentCheck\" \n                    checked={urgent} \n                    onChange={(event) => setUrgent(event.target.checked)} />\n                    <label \n                    className=\"form-check-label\" \n                    htmlFor=\"urgentCheck\">\n                        Urgent?\n                    </label>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default TaskInput;","import React from \"react\";\n\n\nfunction Tasks(props) {\n    const { text, urgent, id, completeTaskFunc, deleteTaskFunc } = props;\n\n    return (\n            <div className=\"row row d-flex p-0\">\n\n                <div className=\"col-2 px-0 pt-1 pb-1\">\n                    <button \n                    type=\"button\" \n                    className=\"btn\" \n                    onClick={() => completeTaskFunc(id)}>\n                        âœ”\n                    </button>\n                </div>\n\n                <div className=\"col-8 p-2 list-group-item\">\n                    {text}\n                    {urgent === 1 ? \" - !\" : \" \"}\n                </div>\n\n                <div className=\"col-2 px-0 pt-1 pb-1\">\n                    <button className=\"btn\">\n                        <i\n                            className=\"fa fa-trash\"\n                            onClick={() => deleteTaskFunc(id)}>\n                        </i>\n                    </button>\n                </div>            \n            </div>\n    );\n}\n\nexport default Tasks;\n","import React from \"react\";\nimport \"./Completed.css\";\n\nfunction Completed(props) {\n    const { text, urgent } = props;\n\n    return (\n        <div className=\"row list-group-item disabled\">\n            {text}\n            {urgent === 1 ? \" - !\" : \" \"}\n        </div>\n    );\n}\n\nexport default Completed; ","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Header from './Header/Header';\nimport TaskInput from './Task-input/Task-input';\nimport Tasks from './Tasks/Tasks';\nimport Completed from './Completed/Completed'\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"https://q92guqntq6.execute-api.eu-west-1.amazonaws.com/dev/tasks\")\n      .then(response => {\n        console.log(\"Success\", response.data);\n        const newTasks = response.data\n\n        newTasks.sort((a, b) => sortNewToOld(a, b))\n\n        setTasks(newTasks);\n      })\n      .catch(err => {\n        console.log(\"Error\", err);\n      });\n    // the array would normally contain values that may change, and React would run the above code WHEN that value changes\n  }, []);\n\n  const addNewTask = (text, urgent) => {\n    axios.post(\"https://q92guqntq6.execute-api.eu-west-1.amazonaws.com/dev/tasks\", {\n      Description: text,\n      Urgent: urgent,\n      Date: new Date()\n    })\n      .then(response => {\n        const newTask = response.data;\n        const newTasks = [newTask, ...tasks];\n        setTasks(newTasks);\n      })\n      .catch(err => {\n        console.log(\"Error creating task\", err);\n      });\n  };\n\n  const setTaskComplete = (id) => {\n    axios.put(`https://q92guqntq6.execute-api.eu-west-1.amazonaws.com/dev/tasks/${id}`, {\n      Completed: 1,\n      Date: new Date()\n    })\n      .then(response => {\n        console.log(\"Updated\", response);\n        const newTasks = tasks.map(task => {\n          if (task.TaskId === id) {\n            task.Completed = 1\n            task.Date = new Date();\n          }\n          return task;\n        })\n\n        newTasks.sort((a, b) => sortNewToOld(a, b))\n\n        setTasks(newTasks);\n      })\n      .catch(err => {\n        console.log(\"Error updating task\", err);\n      })\n  };\n\n  const deleteTask = (id) => {\n    axios.delete(`https://q92guqntq6.execute-api.eu-west-1.amazonaws.com/dev/tasks/${id}`)\n      .then(response => {\n        const filteredTasks = tasks.filter((task) => {\n          if (task.TaskId === id) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        setTasks(filteredTasks)\n      })\n      .catch(err => {\n        console.log(\"API Error\", err);\n      })\n  }\n\n  // These 2 lines filter the items into the correct list (To Do or Completed) and limits Completed to 7 items\n  const completedTasks = tasks.filter(task => task.Completed === 1).slice(0, 7)\n  const todoTasks = tasks.filter(task => task.Completed === 0)\n\n  // These lines orders the Completed list from newest to oldest\n  const sortNewToOld = (a, b) => {\n    let dateA = new Date(a.Date), dateB = new Date(b.Date);\n    return dateB - dateA;\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"Main\">\n\n        <TaskInput addNewTaskFunc={addNewTask} />\n        <div>\n\n          <div className=\"row m-0 justify-content-center\">\n            <div className=\"col-sm-6 mr-sm-3\">\n              <div className=\"todotitle\">\n                <p> To Do ({todoTasks.length}) </p>\n              </div>\n\n              {todoTasks.map(task => {\n                return (\n                  <Tasks\n                    key={task.TaskId}\n                    completeTaskFunc={setTaskComplete}\n                    completed={task.Completed}\n                    text={task.Description}\n                    urgent={task.Urgent}\n                    id={task.TaskId}\n                    deleteTaskFunc={deleteTask}\n                  />\n                );\n              })}\n            </div>\n\n            <div className=\"col-sm-5 mr-sm-2 pb-5\">\n              <div className=\"todotitle pt-3 pt-sm-0\">\n                <p> Completed</p>\n              </div>\n\n              {completedTasks.map(task => {\n                return (\n                  <Completed\n                    key={task.TaskId}\n                    text={task.Description}\n                    urgent={task.Urgent}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}