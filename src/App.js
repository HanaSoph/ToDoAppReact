import React, { useState } from 'react';
import './App.css';
import Header from './Header/Header';
import TaskInput from './Task-input/Task-input';
import Tasks from './Tasks/Tasks';
import Completed from './Completed/Completed'

function App() {

  const [tasks, setTasks] = useState([
    {
      text: "Decide on flowers",
      completed: false,
      completedDate: null,
      urgent: false,
      id: 1
    },

    {
      text: "Book photographer",
      completed: false,
      completedDate: null,
      urgent: true,
      id: 2
    },

    {
      text: "Write guest list",
      completed: false,
      completedDate: null,
      urgent: false,
      id: 3
    },

    {
      text: "Design invitations",
      completed: false,
      completedDate: null,
      urgent: false,
      id: 4
    },

    {
      text: "Research photographers",
      completed: true,
      completedDate: new Date('2020-01-03'),
      urgent: false,
      id: 5
    },

    {
      text: "Book the venue",
      completed: true,
      completedDate: new Date('2020-01-20'),
      urgent: false,
      id: 6
    },

    {
      text: "Decide theme",
      completed: true,
      completedDate: new Date('2020-03-15'),
      urgent: false,
      id: 7
    },
  ])

  const completedTasks = tasks.filter(task => task.completed === true)
  const todoTasks = tasks.filter(task => task.completed === false)


  const addNewTask = (text, urgent) => {
    const newTask = {
      text: text,
      completed: false,
      urgent: urgent,
      id: Math.random() * 100, //UUID is needed here and will be generated by the database (uuid package from NPM)
    };

    const newTasks = [...tasks, newTask];

    setTasks(newTasks);
  }

  const setTaskComplete = (id) => {
    const newTasks = tasks.map(task => {
      if (task.id === id) {
        task.completed = true
        task.completedDate = new Date()
      }
      return task
    })

    // SORTING COMPLETED BY OLDEST TO NEWEST
    newTasks.sort(function (a, b) {
      let dateA = new Date(a.completedDate), dateB = new Date(b.completedDate);
      return dateB - dateA;
    })

    // if the length of the completed list is > 7 then remove the oldest item

    if (newTasks.length > 7) {
      newTasks.pop()
    }

    setTasks(newTasks)
  }

  const deleteTask = (id) => {
    const filteredTasks = tasks.filter((task) => {
      if (task.id === id) {
        return false;
      } else {
        return true;
      }
    });
    setTasks(filteredTasks)
  }


  return (
    <div className="App">
      <Header />
      <div className="Main">

        <TaskInput
          addNewTaskFunc={addNewTask}
        />

        <div>

          <div className="row m-0 justify-content-center">
            <div className="col-sm-6 mr-sm-3">
              <div className="todotitle">
                <p> To Do ({todoTasks.length}) </p>
              </div>

              {todoTasks.map((task) => {
                return <Tasks
                  key={task.id}

                  completeTaskFunc={setTaskComplete}
                  text={task.text}
                  urgent={task.urgent}
                  id={task.id}
                  deleteTaskFunc={deleteTask}
                />
              })}
            </div>


            <div className="col-sm-5 mr-sm-2 pb-5">
              <div className="todotitle pt-3 pt-sm-0">
                <p> Completed</p>
              </div>

              {completedTasks.map((task) => {
                return <Completed
                  key={task.id}
                  text={task.text}
                  urgent={task.urgent}
                  id={task.id} />
              })}

            </div>

          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
